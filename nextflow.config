###ADD ELSEWHERE
params.genome_base = '/Volumes/Cambridge/Reference/Sarek'
params.genome = 'GRCh37'
includeConfig 'genomes.config'
###ADD ELSEWHERE


process {

  container = params.container

  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'

    withName:RunFastQC {
        container = 'maxulysse/qctools:latest'
    }
    withName:TrimReads {
        container = 'viktorlj/sarget:latest'
        cpus = 4
    }
    withName:MapReads {
        container = 'viktorlj/sarget:latest'
        cpus = 8
    }
    withName:AddUMIs {
        container = 'viktorlj/sarget:latest'
        cpus = 4
    }
    withName:VariantCallingUMI {
        container = 'viktorlj/sarget:latest'
    }
    withName:RunVEP {
        container = 'maxulysse/vepgrch37:latest'
    }
    withName:siftAddCosmic {
        container = 'viktorlj/sarekpostprocess:latest'
    }
    withName:finishVCF {
        container = 'viktorlj/sarekpostprocess:latest'
    }
}

profiles {

  standard {
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/genomes.config'
  }
  
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  uppmax {
    includeConfig 'configuration/base.config'
    includeConfig 'configuration/uppmax.config'
    includeConfig 'configuration/genomes.config'
  }

  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}